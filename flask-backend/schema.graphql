
schema {
    query: Query
}

type Customers {
    customerID: ID!
    firstName: String!
    lastName: String!
    email: String!
    phone: String!
}

type Employees {
    employeeID: ID
    firstName: String
    lastName: String
    email: String
    password: String
}

type EmployeesResult {
    success: Boolean!
    errors: [String]
    employees: [Employees]
}

type Orders {
    customerID: ID!
    employeeID: ID!
    destinationLocationID: ID!
    originLocationID: ID!
    packageWeight: Float!
    packageDescription: String!
    packageType: String!
}

type EmployeeSearch {
    email: String!
}

type Query {
    employee (email: String!): Employees!
    employees: [Employees]

    customer (email: String!): Customers!
    customers: [Customers]

    order (orderID: ID!): Orders!
    orders: [Orders]
}

type CustomerPayload {
    customerID: ID!
}

type OrderPayload {
    orderID: ID!
}

type Mutation {
    createCustomer (
        firstName: String!
        lastName: String!
        email: String!
        phone: String!
    ): CustomerPayload!
}